// Generated by gencpp from file rh_p12_rn_a_base_module_msgs/GetItemValueRequest.msg
// DO NOT EDIT!


#ifndef RH_P12_RN_A_BASE_MODULE_MSGS_MESSAGE_GETITEMVALUEREQUEST_H
#define RH_P12_RN_A_BASE_MODULE_MSGS_MESSAGE_GETITEMVALUEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rh_p12_rn_a_base_module_msgs
{
template <class ContainerAllocator>
struct GetItemValueRequest_
{
  typedef GetItemValueRequest_<ContainerAllocator> Type;

  GetItemValueRequest_()
    : joint_name()
    , item_name()  {
    }
  GetItemValueRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , item_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_name_type;
  _joint_name_type joint_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item_name_type;
  _item_name_type item_name;





  typedef boost::shared_ptr< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetItemValueRequest_

typedef ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<std::allocator<void> > GetItemValueRequest;

typedef boost::shared_ptr< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest > GetItemValueRequestPtr;
typedef boost::shared_ptr< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest const> GetItemValueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator1> & lhs, const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.item_name == rhs.item_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator1> & lhs, const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rh_p12_rn_a_base_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e170fc248fec40d23cbd2fa190c2648e";
  }

  static const char* value(const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe170fc248fec40d2ULL;
  static const uint64_t static_value2 = 0x3cbd2fa190c2648eULL;
};

template<class ContainerAllocator>
struct DataType< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rh_p12_rn_a_base_module_msgs/GetItemValueRequest";
  }

  static const char* value(const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"string item_name\n"
;
  }

  static const char* value(const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.item_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetItemValueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rh_p12_rn_a_base_module_msgs::GetItemValueRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name);
    s << indent << "item_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RH_P12_RN_A_BASE_MODULE_MSGS_MESSAGE_GETITEMVALUEREQUEST_H
